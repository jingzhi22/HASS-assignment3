// The svg
const svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

// Map and projection
const projection = d3.geoMercator()
    //.center([103,1]) 
    .center([104.0,1.29])               // GPS of location to zoom on
    .scale(70000)                       // This is like the zoom
    //.translate([ width/2, height/2 ])

Promise.all([
d3.json("./subzone-boundary.geojson"),
d3.csv("./data.csv")
]).then(function (initialize) {

    let boundary = initialize[0]
    let town = initialize[1]

    console.log(boundary);
    console.log(town);

    let arrAvg = arr => arr.reduce((a,b) => a + b,0) / arr.length

    function map_range(value, low1, high1, low2, high2) {
        return low2 + (high2 - low2) * (value - low1) / (high1 - low1);
    }

    // Draw the map
    svg.append("g")
        .selectAll("path")
        .data(boundary.features)
        .join("path")
        .attr("fill", "#bbbbbb")
        .attr("d", d3.geoPath().projection(projection))
        .attr("id", function(d) { return d.properties.PLN_AREA_N; })
        .style("stroke", 2)
        .style("opacity", 1)
    
    var logoPaths = [
        "M59.834,44.704c-1.142-0.974-2.606-1.821-4.283-2.522c-1.316-0.546-2.519-1.038-4.519-1.47v-2.819   c1,0.165,0.99,0.352,1.48,0.563c1.075,0.469,2.142,1.062,3.135,1.76l1.316,0.92l5.823-9.49l-1.167-0.807   c-1.623-1.12-3.581-2.063-5.495-2.805c-1.513-0.581-3.091-1.018-5.091-1.302v-3.414h-8v3.21c-2,0.2-3.011,0.55-4.298,1.042   c-1.696,0.648-3.166,1.517-4.35,2.582c-1.22,1.102-1.965,2.399-2.588,3.85c-0.633,1.45-0.764,3.061-0.764,4.786v0.103   c0,1.82,0.122,3.438,0.747,4.809c0.631,1.382,1.469,2.596,2.68,3.602c1.175,0.984,2.502,1.823,4.203,2.49   c1.348,0.534,2.37,1.008,4.37,1.438v3.154c-1-0.249-1.716-0.566-2.585-0.949c-1.492-0.658-2.985-1.547-4.522-2.641l-1.23-0.891   l-6.323,9.352l1.189,0.852c2.067,1.487,4.459,2.699,6.966,3.601c2.063,0.744,4.505,1.286,6.505,1.614v4.997h8v-4.885   c2-0.213,2.878-0.55,4.124-1.006c1.66-0.611,3.168-1.45,4.373-2.495c1.219-1.063,1.996-2.333,2.678-3.787   c0.67-1.459,0.825-3.104,0.825-4.887v-0.109c0-1.767-0.088-3.372-0.682-4.774C61.75,46.968,61.044,45.733,59.834,44.704z    M60.032,53.258c0,1.349-0.035,2.572-0.517,3.624c-0.499,1.063-1.104,2.001-2.004,2.786c-0.928,0.804-2.013,1.458-3.328,1.942   c-1.393,0.509-3.032,0.846-4.702,0.999l-1.449,0.126v4.582h-2v-4.662l-1.406-0.146c-2.479-0.27-4.827-0.801-7.113-1.627   c-1.768-0.635-3.445-1.439-4.968-2.398l2.961-4.386c1.281,0.826,2.558,1.523,3.82,2.08c1.648,0.726,3.285,1.249,5.034,1.555   l1.673,0.308v-9.178l-1.074-0.271c-1.986-0.466-3.707-1.001-5.202-1.594c-1.403-0.55-2.563-1.223-3.493-2.002   c-0.879-0.729-1.317-1.562-1.764-2.543c-0.446-0.978-0.467-2.177-0.467-3.564v-0.103c0-1.31,0.042-2.517,0.512-3.595   c0.455-1.059,1.042-2.005,1.937-2.813c0.906-0.816,2.002-1.492,3.354-2.008c1.388-0.531,3.001-0.864,4.807-0.99l1.391-0.097v-2.968   h2v3.058l1.496,0.153c2.011,0.231,3.952,0.671,5.6,1.304c1.234,0.479,2.452,1.05,3.553,1.708l-2.648,4.353   c-0.75-0.448-1.512-0.846-2.301-1.19c-1.29-0.556-2.6-0.981-3.83-1.266l-1.869-0.426v9.068l1.198,0.27   c1.968,0.457,3.726,0.996,5.186,1.602c1.386,0.579,2.557,1.265,3.463,2.037c0.854,0.727,1.29,1.589,1.705,2.561   c0.435,1.026,0.447,2.238,0.447,3.601V53.258z",
        "M57.889,46.988c-0.906-0.772-2.068-1.458-3.454-2.037c-1.46-0.605-3.237-1.145-5.205-1.602   l-1.198-0.27v-9.068l1.875,0.426c1.23,0.284,2.527,0.71,3.817,1.266c0.789,0.345,1.571,0.742,2.321,1.19l2.674-4.353   c-1.101-0.658-2.274-1.229-3.508-1.708c-1.648-0.633-3.672-1.072-5.683-1.304l-1.494-0.153v-3.058h-2v2.968l-1.415,0.097   c-1.806,0.126-3.434,0.459-4.821,0.99c-1.352,0.516-2.501,1.191-3.407,2.008c-0.895,0.808-1.387,1.754-1.842,2.813   c-0.47,1.078-0.515,2.285-0.515,3.595v0.103c0,1.388,0.031,2.587,0.477,3.564c0.447,0.981,0.993,1.813,1.872,2.543   c0.93,0.779,2.062,1.452,3.465,2.002c1.495,0.593,3.149,1.128,5.136,1.594l1.05,0.271v9.178l-1.675-0.308   c-1.749-0.306-3.43-0.829-5.078-1.555c-1.262-0.557-2.522-1.254-3.803-2.08l-2.959,4.386c1.523,0.959,3.189,1.764,4.956,2.398   c2.286,0.826,4.672,1.357,7.15,1.627l1.409,0.146v4.662h2v-4.582l1.476-0.126c1.67-0.153,3.279-0.49,4.672-0.999   c1.314-0.484,2.481-1.139,3.409-1.942c0.9-0.785,1.413-1.724,1.912-2.786c0.482-1.052,0.531-2.275,0.531-3.624v-0.109   c0-1.362-0.008-2.574-0.443-3.601C59.174,48.577,58.743,47.714,57.889,46.988z M46.032,42.967l-1.787-0.515   c-1.677-0.455-2.564-0.946-3.225-1.546c-0.781-0.718-0.989-1.68-0.989-2.79v-0.104c0-1.115,0.306-2.104,1.168-2.861   c0.795-0.688,1.78-1.085,3.389-1.218l1.443-0.134V42.967z M49.704,58.053l-1.671,0.173v-9.329l1.924,0.541   c1.615,0.458,2.687,0.961,3.355,1.582c0.785,0.732,1.195,1.701,1.195,2.805C54.507,55.279,53.879,57.617,49.704,58.053z"
    ];

    for (let i = 0; i < town.length; i++)
    {
        var townName = town[i].name;
        /*
        var boundaryIndex = boundary.features.findIndex(function(feature) {
            return feature.properties.PLN_AREA_N == townName
            });
        */
        var boundaryIndex = boundary.features.findIndex(function(feature) {
            return feature.properties.Description.includes(townName)
            });
        var townFeature = boundary.features[boundaryIndex];
        var townCoordinates = townFeature.geometry.coordinates;
        var town_av_ppsm = town[i].av_ppsm;

        var lat = [];
        var lon = [];
        for(var j=0; j<townCoordinates.length; j++){
            lat.push(townCoordinates[j][1]);
            lon.push(townCoordinates[j][0]);
        }
        var latAvg = arrAvg(lat);
        var lonAvg = arrAvg(lon);
        var center = projection([lonAvg,latAvg])

        svg.append('circle')
            .attr('cx',center[0])
            .attr('cy',center[1])
            .attr('r',map_range(town_av_ppsm,2000,10000,3,30))
            .attr('stroke', 'black')
            .attr('fill', '#33333333')
            ;
    }
svg.append('path')
            .attr('d', logoPaths[0])
            .attr('d', logoPaths[1])
            .attr("transform", 'translate(50,50)')
            ;

    

})
